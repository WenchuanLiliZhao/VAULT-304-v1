import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// List of directories to include
const postDirectories = ["main"]; // Add your directories here

const srcPagesDir = path.join(__dirname, "../src/pages/channels");
const outputDir = path.join(__dirname, "../src/pages"); // New output directory

// Define the output file path as a constant
const ALL_POSTS_FILE = path.join(outputDir, "AllChannels.tsx");

async function generateAllPosts() {
  try {
    const allImports = [];
    const allPosts = {};

    for (const dir of postDirectories) {
      const currentDir = path.join(srcPagesDir, dir);
      const files = await fs.readdir(currentDir);
      const postFiles = files.filter((file) => file.endsWith(".tsx"));

      for (const file of postFiles) {
        const fileName = path.basename(file, ".tsx");
        const importName = `${fileName}`;
        
        const importPath = `./channels/${dir}/${fileName}`;
        allImports.push(`import ${importName} from "${importPath}";`);
        allPosts[`${fileName}`] = importName;
      }
    }

    const importsSection = allImports.join("\n");
    const postsEntries = Object.entries(allPosts)
      .map(([key, value]) => `  ${key}: ${value},`)
      .join("\n");

    const allPostsContent = `// Note: This file is autogenerated by generateAllChannels.js
${importsSection}

export const AllChannels = {
${postsEntries}
};
`;

    await fs.writeFile(ALL_POSTS_FILE, allPostsContent, "utf8");
    console.log("AllChannels.tsx has been generated successfully.");
  } catch (error) {
    console.error("Error generating AllChannels.tsx:", error);
    process.exit(1);
  }
}

generateAllPosts();
